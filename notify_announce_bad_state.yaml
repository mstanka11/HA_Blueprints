blueprint:
  name: Notify/Announce on Bad State (Script) + Custom Message Template
  description: >
    Re-usable script to create notifications and/or TTS announcements when a
    specified entity is in an undesired (“bad”) state. Intended to be called
    from your automations. Supports a custom message template and optional
    prior_state/trigger text. Works with any entity that has a simple state
    (e.g., light on/off, lock locked/unlocked).
  domain: script
  author: m365-copilot
  source_url: https://github.com/youruser/yourrepo/blob/main/blueprints/script/m365/notify_announce_bad_state.yaml

  input:
    check_entity:
      name: Entity to check
      description: Entity that should not be in the "bad" state (e.g., a lock or light).
      selector:
        entity: {}

    desired_bad_state:
      name: Bad state (exact)
      description: >
        Exact state considered “bad”. Leave blank to auto-infer:
        lock→unlocked, binary_sensor→on, cover→open, otherwise→on.
      default: ""
      selector:
        text: {}

    grace_seconds:
      name: Grace period (seconds)
      description: Wait this many seconds, then re-check before notifying.
      default: 0
      selector:
        number:
          min: 0
          max: 600
          unit_of_measurement: s
          mode: box

    # --- CUSTOM MESSAGE CONTROLS ---
    message_template:
      name: Custom message template (optional)
      description: |
        This template is rendered with these variables:
          - check_entity_id, check_name, check_domain
          - state_now (current state), bad_state
          - prior_state (optional input), trigger_text (optional input)
        Examples:
          • {{ check_name }} is {{ state_now }}.
          • {{ check_name }} changed from {{ prior_state or 'unknown' }} to {{ state_now }}{{ ' (' ~ trigger_text ~ ')' if trigger_text else '' }}.
      default: ""
      selector:
        text:
          multiline: true
    prior_state:
      name: Prior state (optional; pass from your automation)
      description: Often set to {{ trigger.from_state.state }} in your calling automation.
      default: ""
      selector:
        text: {}

    trigger_text:
      name: Trigger context (optional)
      description: Free text like "Michael left Home" to add context in the message.
      default: ""
      selector:
        text: {}

    # --- MESSAGE / TITLES (fallback builder) ---
    title_text:
      name: Notification title
      default: "Home Alert"
      selector:
        text: {}

    message_prefix:
      name: Message prefix (optional)
      default: ""
      selector:
        text: {}

    message_suffix:
      name: Message suffix (optional)
      default: ""
      selector:
        text: {}

    # --- PERSISTENT NOTIFICATION ---
    use_persistent_notification:
      name: Create persistent notification
      default: true
      selector:
        boolean: {}

    # --- PUSH (MOBILE APP) ---
    use_push_notification:
      name: Send push notification to phones (mobile_app)
      default: false
      selector:
        boolean: {}

    mobile_targets:
      name: Push targets (devices)
      description: Choose phones/tablets registered with the Mobile App.
      default: []
      selector:
        device:
          multiple: true
          filter:
            integration: mobile_app

    push_channel:
      name: Push channel (Android) / category (iOS)
      default: "Home"
      selector:
        text: {}

    push_critical:
      name: Critical alert (iOS) / High priority (Android)
      default: true
      selector:
        boolean: {}

    # --- TTS ---
    use_tts:
      name: Make a TTS announcement
      default: true
      selector:
        boolean: {}

    tts_entity:
      name: TTS engine (Wyoming → Azure)
      description: Your tts entity (e.g., tts.wyoming_microsoft_tts).
      default: null
      selector:
        entity:
          domain: tts

    media_players:
      name: Speakers / Displays
      description: One or more media_player entities (e.g., Nest Hub, Sonos).
      default: []
      selector:
        entity:
          domain: media_player
          multiple: true

    voice_short_name:
      name: Azure voice short name (exact)
      description: e.g., en-US-SaraNeural (defaults to Sara if left blank)
      default: "en-US-SaraNeural"
      selector:
        text: {}

    tts_cache:
      name: Cache TTS audio
      default: true
      selector:
        boolean: {}

# ------------ SCRIPT SEQUENCE ------------
sequence:
  # 0) Bind inputs to variables (no Jinja on !input usage)
  - variables:
      check_entity_id: !input check_entity
      desired_bad_state_raw: !input desired_bad_state
      grace_sec: !input grace_seconds

      # custom message inputs
      message_template_raw: !input message_template
      prior_state_raw: !input prior_state
      trigger_text_raw: !input trigger_text

      # fallback message inputs
      title_text_raw: !input title_text
      msg_prefix_raw: !input message_prefix
      msg_suffix_raw: !input message_suffix

      use_persist_flag: !input use_persistent_notification
      use_push_flag: !input use_push_notification
      mobile_targets_list: !input mobile_targets
      push_channel_raw: !input push_channel
      push_critical_flag: !input push_critical

      use_tts_flag: !input use_tts
      tts_entity_id: !input tts_entity
      media_players_list: !input media_players
      voice_raw: !input voice_short_name
      tts_cache_flag: !input tts_cache

  # 1) Compute effective “bad” state and friendly names
  - variables:
      check_domain: "{{ check_entity_id.split('.')[0] }}"
      bad_state: >-
        {% set v = desired_bad_state_raw | trim %}
        {% if v %}
          {{ v }}
        {% elif check_domain == 'lock' %}
          unlocked
        {% elif check_domain == 'binary_sensor' %}
          on
        {% elif check_domain == 'cover' %}
          open
        {% else %}
          on
        {% endif %}
      check_name: "{{ state_attr(check_entity_id, 'friendly_name') or check_entity_id }}"
      state_now: "{{ states(check_entity_id) }}"
      title_text: "{{ title_text_raw | trim if title_text_raw is string else 'Home Alert' }}"
      msg_prefix: "{{ (msg_prefix_raw | trim ~ ' ') if msg_prefix_raw is string and msg_prefix_raw|trim else '' }}"
      msg_suffix: "{{ (' ' ~ msg_suffix_raw | trim) if msg_suffix_raw is string and msg_suffix_raw|trim else '' }}"
      voice_name: >-
        {% set v = voice_raw | trim %}
        {{ v if v else 'en-US-SaraNeural' }}
      prior_state: "{{ prior_state_raw | trim if prior_state_raw is string else '' }}"
      trigger_text: "{{ trigger_text_raw | trim if trigger_text_raw is string else '' }}"
      message_template_is_set: "{{ (message_template_raw is string) and (message_template_raw | trim != '') }}"

  # 2) Optional grace delay then re-check
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ grace_sec|int > 0 }}"
        sequence:
          - delay:
              seconds: "{{ grace_sec|int }}"
          - variables:
              state_now: "{{ states(check_entity_id) }}"
    default: []

  # 3) If entity is NOT in bad state, stop silently
  - if:
      - condition: template
        value_template: "{{ state_now != bad_state }}"
    then:
      - stop: "Entity not in bad state; nothing to do."

  # 4) Fallback message (auto builder) — used only if no custom template supplied
  - variables:
      auto_message: >-
        {% set pretty_state = state_now | replace('_',' ') %}
        {{ (check_name ~ " is " ~ pretty_state ~ ".") | trim }}

  # 5) Persistent notification (optional)
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ use_persist_flag }}"
        sequence:
          # if custom template is set, render it directly in this field
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ message_template_is_set }}"
                sequence:
                  - service: persistent_notification.create
                    data:
                      title: "{{ title_text }}"
                      message: !input message_template
            default:
              - service: persistent_notification.create
                data:
                  title: "{{ title_text }}"
                  message: "{{ (msg_prefix ~ auto_message ~ msg_suffix) | trim }}"
    default: []

  # 6) Push notification via Mobile App (optional)
  - choose:
      - conditions:
          - condition: template
            value_template: >
              {{ use_push_flag and (mobile_targets_list | count) > 0 }}
        sequence:
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ message_template_is_set }}"
                sequence:
                  - service: notify.notify
                    data:
                      title: "{{ title_text }}"
                      message: !input message_template
                      target: !input mobile_targets
                      data:
                        channel: "{{ push_channel_raw }}"
                        ttl: 0
                        priority: high
                        push:
                          sound:
                            name: default
                            critical: "{{ 1 if push_critical_flag else 0 }}"
                            volume: 1.0
            default:
              - service: notify.notify
                data:
                  title: "{{ title_text }}"
                  message: "{{ (msg_prefix ~ auto_message ~ msg_suffix) | trim }}"
                  target: !input mobile_targets
                  data:
                    channel: "{{ push_channel_raw }}"
                    ttl: 0
                    priority: high
                    push:
                      sound:
                        name: default
                        critical: "{{ 1 if push_critical_flag else 0 }}"
                        volume: 1.0
    default: []

  # 7) TTS announcement (optional) per selected media_player
  - choose:
      - conditions:
          - condition: template
            value_template: >
              {{ use_tts_flag and tts_entity_id is not none and (media_players_list | count) > 0 }}
        sequence:
          - repeat:
              for_each: !input media_players
              sequence:
                - choose:
                    - conditions:
                        - condition: template
                          value_template: "{{ message_template_is_set }}"
                      sequence:
                        - service: tts.speak
                          target:
                            entity_id: !input tts_entity
                          data:
                            media_player_entity_id: "{{ repeat.item }}"
                            cache: "{{ tts_cache_flag }}"
                            options:
                              voice: "{{ voice_name }}"
                            message: !input message_template
                  default:
                    - service: tts